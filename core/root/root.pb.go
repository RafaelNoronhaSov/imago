// root/root.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.29.0
// source: chunker/root/root.proto

package root

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for creating image chunks.
type CreateImageChunksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique name or ID for the image, used for seeding.
	ImageIdentifier string `protobuf:"bytes,1,opt,name=image_identifier,json=imageIdentifier,proto3" json:"image_identifier,omitempty"`
	// The raw byte data of the image to be processed.
	ImageData     []byte `protobuf:"bytes,2,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateImageChunksRequest) Reset() {
	*x = CreateImageChunksRequest{}
	mi := &file_chunker_root_root_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateImageChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageChunksRequest) ProtoMessage() {}

func (x *CreateImageChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunker_root_root_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageChunksRequest.ProtoReflect.Descriptor instead.
func (*CreateImageChunksRequest) Descriptor() ([]byte, []int) {
	return file_chunker_root_root_proto_rawDescGZIP(), []int{0}
}

func (x *CreateImageChunksRequest) GetImageIdentifier() string {
	if x != nil {
		return x.ImageIdentifier
	}
	return ""
}

func (x *CreateImageChunksRequest) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

// ImageChunks represents the complete, processed output for an image.
// It contains both the data segments and the corresponding parity shards for recovery.
type ImageChunks struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of all the data chunks (vertical segments) of the image.
	Chunks []*Chunk `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
	// A list of all the generated parity shards for erasure coding.
	ParityShards  [][]byte `protobuf:"bytes,2,rep,name=parity_shards,json=parityShards,proto3" json:"parity_shards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageChunks) Reset() {
	*x = ImageChunks{}
	mi := &file_chunker_root_root_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageChunks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageChunks) ProtoMessage() {}

func (x *ImageChunks) ProtoReflect() protoreflect.Message {
	mi := &file_chunker_root_root_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageChunks.ProtoReflect.Descriptor instead.
func (*ImageChunks) Descriptor() ([]byte, []int) {
	return file_chunker_root_root_proto_rawDescGZIP(), []int{1}
}

func (x *ImageChunks) GetChunks() []*Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *ImageChunks) GetParityShards() [][]byte {
	if x != nil {
		return x.ParityShards
	}
	return nil
}

// Chunk represents a single vertical segment of an image.
type Chunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique, deterministic seed for this specific chunk.
	Nanoseed []byte `protobuf:"bytes,1,opt,name=nanoseed,proto3" json:"nanoseed,omitempty"`
	// The raw byte data of the 1px wide image segment, encoded as PNG.
	SegmentData   []byte `protobuf:"bytes,2,opt,name=segment_data,json=segmentData,proto3" json:"segment_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	mi := &file_chunker_root_root_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_chunker_root_root_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_chunker_root_root_proto_rawDescGZIP(), []int{2}
}

func (x *Chunk) GetNanoseed() []byte {
	if x != nil {
		return x.Nanoseed
	}
	return nil
}

func (x *Chunk) GetSegmentData() []byte {
	if x != nil {
		return x.SegmentData
	}
	return nil
}

var File_chunker_root_root_proto protoreflect.FileDescriptor

const file_chunker_root_root_proto_rawDesc = "" +
	"\n" +
	"\x17chunker/root/root.proto\x12\x04root\"d\n" +
	"\x18CreateImageChunksRequest\x12)\n" +
	"\x10image_identifier\x18\x01 \x01(\tR\x0fimageIdentifier\x12\x1d\n" +
	"\n" +
	"image_data\x18\x02 \x01(\fR\timageData\"W\n" +
	"\vImageChunks\x12#\n" +
	"\x06chunks\x18\x01 \x03(\v2\v.root.ChunkR\x06chunks\x12#\n" +
	"\rparity_shards\x18\x02 \x03(\fR\fparityShards\"F\n" +
	"\x05Chunk\x12\x1a\n" +
	"\bnanoseed\x18\x01 \x01(\fR\bnanoseed\x12!\n" +
	"\fsegment_data\x18\x02 \x01(\fR\vsegmentData2U\n" +
	"\vRootService\x12F\n" +
	"\x11CreateImageChunks\x12\x1e.root.CreateImageChunksRequest\x1a\x11.root.ImageChunksB\tZ\a./;rootb\x06proto3"

var (
	file_chunker_root_root_proto_rawDescOnce sync.Once
	file_chunker_root_root_proto_rawDescData []byte
)

func file_chunker_root_root_proto_rawDescGZIP() []byte {
	file_chunker_root_root_proto_rawDescOnce.Do(func() {
		file_chunker_root_root_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chunker_root_root_proto_rawDesc), len(file_chunker_root_root_proto_rawDesc)))
	})
	return file_chunker_root_root_proto_rawDescData
}

var file_chunker_root_root_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chunker_root_root_proto_goTypes = []any{
	(*CreateImageChunksRequest)(nil), // 0: root.CreateImageChunksRequest
	(*ImageChunks)(nil),              // 1: root.ImageChunks
	(*Chunk)(nil),                    // 2: root.Chunk
}
var file_chunker_root_root_proto_depIdxs = []int32{
	2, // 0: root.ImageChunks.chunks:type_name -> root.Chunk
	0, // 1: root.RootService.CreateImageChunks:input_type -> root.CreateImageChunksRequest
	1, // 2: root.RootService.CreateImageChunks:output_type -> root.ImageChunks
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_chunker_root_root_proto_init() }
func file_chunker_root_root_proto_init() {
	if File_chunker_root_root_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chunker_root_root_proto_rawDesc), len(file_chunker_root_root_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chunker_root_root_proto_goTypes,
		DependencyIndexes: file_chunker_root_root_proto_depIdxs,
		MessageInfos:      file_chunker_root_root_proto_msgTypes,
	}.Build()
	File_chunker_root_root_proto = out.File
	file_chunker_root_root_proto_goTypes = nil
	file_chunker_root_root_proto_depIdxs = nil
}
